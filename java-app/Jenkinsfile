pipeline {
    agent any

    tools {
        jfrog 'jfrog'
        maven 'Maven 3.8.3'
        jdk 'jdk8'
        //docker 'docker' // Assuming 'docker' is the tool name for Docker in your Jenkins configuration
    }
    environment {
       # Set Docker-related environment variables
export DOCKER_REGISTRY="hggosa.jfrog.io"
export DOCKER_REPO="docker-local"
export DOCKER_IMAGE_NAME="demo-java-app"
export DOCKER_IMAGE_TAG="1.0.0"

# Set JFrog CLI-related environment variables
export JFROG_CLI_HOME="$HOME/.jfrog"
export JFROG_CLI_TEMP_DIR="$JFROG_CLI_HOME/temp"
export JFROG_CLI_LOG_FILE="$JFROG_CLI_HOME/jfrog-cli.log"

# Set JFrog Artifactory details
export ARTIFACTORY_URL="https://your-artifactory-instance.com/artifactory"
export ARTIFACTORY_USERNAME="your-artifactory-username"
export ARTIFACTORY_PASSWORD="your-artifactory-password"

# Set other environment variables as needed

# Your Docker login command (replace placeholders with actual values)
docker login -u "$ARTIFACTORY_USERNAME" -p "$ARTIFACTORY_PASSWORD" "$DOCKER_REGISTRY"

# Build and push Docker image
docker build -t "$DOCKER_REGISTRY/$DOCKER_REPO/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG" .
docker push "$DOCKER_REGISTRY/$DOCKER_REPO/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"

# Use JFrog CLI to publish build information
jfrog rt bp demo-build-name demo-build-number

# Clean up (optional)
docker logout "$DOCKER_REGISTRY"
    }

    stages {
        stage('Build') {
            steps {
                script {
                    dir('java-app') {
                        // Corrected the command to use the 'maven' tool
                        sh 'mvn clean install'
                    }
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    dir('java-app') {
                        sh 'mvn test'
                    }
                }
            }
        }
        stage('Build Docker image') {
            steps {
                script {
                    dir('java-app') {
                        // Use the 'docker' tool to build the Docker image
                        sh "docker build -t $DOCKER_IMAGE_NAME ."
                    }
                }
            }
        }
        stage('Scan and push image') {
            steps {
                script {
                    dir('java-app') {
                        // Assuming 'jf' is a shorthand for running JFrog CLI commands
                        // Corrected the syntax for scanning Docker images
                        sh "jfrog docker scan $DOCKER_IMAGE_NAME"
                        sh "docker push $DOCKER_IMAGE_NAME"
                    }
                }
            }
        }
        stage('Publish build info') {
            steps {
                script {
                    // Assuming 'jf' is a shorthand for running JFrog CLI commands
                    sh 'jfrog rt build-publish'
                }
            }
        }
    }
}
