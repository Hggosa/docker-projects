pipeline {
    agent any

    tools {
        jfrog 'jfrog-cli'
        maven 'Maven 3.9.5'
        jdk 'jdk8'
        //docker 'docker' // Assuming 'docker' is the tool name for Docker in your Jenkins configuration
    }
    environment {
        DOCKER_IMAGE_NAME = "hggosa.jfrog.io/docker-local/demo-java-app:1.0.0"
    }

    stages {
        stage('Build') {
            steps {
                script {
                    dir('java-app') {
                        // Corrected the command to use the 'maven' tool
                        sh 'mvn clean install'
                    }
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    dir('java-app') {
                        sh 'mvn test'
                    }
                }
            }
        }
        stage('Build Docker image') {
            steps {
                script {
                    dir('java-app') {
                        // Use the 'docker' tool to build the Docker image
                        sh "docker build -t $DOCKER_IMAGE_NAME ."
                    }
                }
            }
        }
        stage('Scan and push image') {
            steps {
                script {
                    dir('java-app') {
                        // Assuming 'jf' is a shorthand for running JFrog CLI commands
                        // Corrected the syntax for scanning Docker images
                        sh "jfrog rt docker-scan $DOCKER_IMAGE_NAME"
                        sh "docker push $DOCKER_IMAGE_NAME"
                    }
                }
            }
        }
        stage('Publish build info') {
            steps {
                script {
                    // Assuming 'jf' is a shorthand for running JFrog CLI commands
                    sh 'jfrog rt build-publish'
                }
            }
        }
    }
}
